{
	"language": "Solidity",
	"sources": {
	  "spin.sol": {
		"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ncontract SlotMachine {\n    /// @notice Spins a slot machine and returns a 3-digit number (000â€“999)\n    /// @param seed Any user-defined input (wallet, timestamp, etc.)\n    /// @return result A number like 777, 123, etc.\n    function spin(uint256 seed) public view returns (uint256 result) {\n        // Using block information for additional randomness\n        uint256 combinedSeed = seed + block.timestamp + block.number;\n\n        uint256 slot1 = (uint256(keccak256(abi.encodePacked(combinedSeed, \"slot1\"))) % 10);\n        uint256 slot2 = (uint256(keccak256(abi.encodePacked(combinedSeed, \"slot2\"))) % 10);\n        uint256 slot3 = (uint256(keccak256(abi.encodePacked(combinedSeed, \"slot3\"))) % 10);\n\n        result = slot1 * 100 + slot2 * 10 + slot3;\n    }\n}"
	  }
	},
	"settings": {
	  "optimizer": {
		"enabled": true,
		"runs": 200
	  },
	  "outputSelection": {
		"*": {
		  "*": ["abi", "evm.bytecode", "evm.deployedBytecode"]
		}
	  }
	}
  }
  